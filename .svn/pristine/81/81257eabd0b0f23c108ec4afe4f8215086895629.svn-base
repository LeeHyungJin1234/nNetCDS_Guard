<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="nnsp.xmlmappers.NdrAnalyzeXmlMapper">
	
	<!--   조건에 따른 ICS 프로토콜 종류 목록    -->
	<select id="getIcsProtocolList" parameterType="map" resultType="NdrPs">
		SELECT PS_PROTO_SUB_DEC
		FROM nnet_cds2.nnc_packet_stat_#{ps_table}
		WHERE PS_STRC_TIME <![CDATA[>=]]> #{ps_stime}
		AND PS_STRC_TIME <![CDATA[<=]]> #{ps_etime}
		<if test="ps_proto_ics != null">
			AND PS_PROTO_ICS = #{ps_proto_ics}
		</if>
		<if test="ps_proto_ics_type != null">
			AND PS_PROTO_ICS_TYPE = #{ps_proto_ics_type}
		</if>
		<if test="ps_proto_ics_cmd_type != null">
			AND PS_PROTO_ICS_CMD_TYPE = #{ps_proto_ics_cmd_type}
		</if>
		<if test="ps_proto_sub_dec != null">
			AND PS_PROTO_SUB_DEC = #{ps_proto_sub_dec}
		</if>
		GROUP BY PS_PROTO_SUB_DEC
	</select>
	
	<!--   조건에 따른 ICS 패킷 목록    -->
	<select id="getICSPacketList" parameterType="map" resultType="NdrPs">
		SELECT
			PS_ID
			,PS_STRC_TIME
			,PS_PROTO_ID
			,PS_PROTO_SUB_TYPE
			,PS_PROTO_SUB_DEC
			,PS_PROTO_ICS
			,PS_PROTO_ICS_TYPE
			,PS_PROTO_ICS_CMD_TYPE
			,PS_SRC_MAC
			,PS_SRC_MAC_VENDOR
			,PS_DST_MAC
			,PS_DST_MAC_VENDOR
			,PS_SRC_IP
			,PS_DST_IP
			,PS_SRC_PORT
			,PS_DST_PORT
			,BYTES
			,PACKETS
			,PS_INOUT
			,PS_DETECT
			,PS_DETECT_DESC
			,rowNumber
		FROM (
			SELECT 
				PS_ID
				,PS_STRC_TIME
				,PS_PROTO_ID
				,PS_PROTO_SUB_TYPE
				,PS_PROTO_SUB_DEC
				,PS_PROTO_ICS
				,PS_PROTO_ICS_TYPE
				,PS_PROTO_ICS_CMD_TYPE
				,PS_SRC_MAC
				,PS_SRC_MAC_VENDOR
				,PS_DST_MAC
				,PS_DST_MAC_VENDOR
				,PS_SRC_IP
				,PS_DST_IP
				,PS_SRC_PORT
				,PS_DST_PORT
				,PS_BYTES AS BYTES
				,PS_PACKETS AS PACKETS
				,PS_INOUT
				,PS_DETECT
				,PS_DETECT_DESC
				, ROW_NUMBER() OVER (
					ORDER BY PS_STRC_TIME DESC
					,PS_PROTO_SUB_DEC ASC
					,inet_aton(PS_SRC_IP) ASC
					,inet_aton(PS_DST_IP) ASC
					,PS_ID DESC
				) rowNumber
			FROM nnet_cds2.nnc_packet_stat_#{ps_table} ps
			WHERE PS_STRC_TIME <![CDATA[>=]]> #{ps_stime}
			AND PS_STRC_TIME <![CDATA[<=]]> #{ps_etime}
			<if test="ps_inout != null">
				AND PS_INOUT = #{ps_inout}
			</if>
		) ps
		WHERE 1=1
		<if test="rowNumber != null">
			AND rowNumber <![CDATA[>]]> #{rowNumber}
		</if>
		ORDER BY rowNumber ASC
		<if test="cnt != null">
			LIMIT #{cnt}
		</if>
		<if test="page != null and rowsPerPage != null">
			LIMIT #{page}, #{rowsPerPage}
		</if>
	</select>
	
	<!--   조건에 따른 ICS 패킷 시그니처 수    -->
	<select id="getICSPacketCnt" parameterType="map" resultType="int">
		SELECT COUNT(*) AS CNT
		FROM nnet_cds2.nnc_packet_stat_#{ps_table} ps
		WHERE PS_STRC_TIME <![CDATA[>=]]> #{ps_stime}
		AND PS_STRC_TIME <![CDATA[<=]]> #{ps_etime}
	</select>
	
	<!--  ICS 시그니쳐 통신 목록    -->
	<select id="getPWRList" parameterType="map" resultType="NdrPs">
		SELECT PS_ID 
			,PS_STRC_TIME
			,PS_PAYLOAD_SIZE
			,PS_TYPE
			,PS_PROTO_ID
			,PS_PROTO_SUB_TYPE
			,PS_PROTO_SUB_DEC
			,PS_PROTO_ICS
			,PS_PROTO_ICS_TYPE
			,PS_PROTO_ICS_CMD_TYPE
			,PS_SRC_MAC
			,PS_SRC_MAC_VENDOR
			,PS_SRC_ICS_VENDOR
			,PS_SRC_ICS_Layer
			,PS_DST_MAC
			,PS_DST_MAC_VENDOR
			,PS_DST_ICS_VENDOR
			,PS_DST_ICS_Layer
			,PS_ETHER_TYPE
			,PS_ETHER_TYPE_DEC
			,PS_DSAP
			,PS_SSAP
			,PS_ORGANIZATION
			,PS_PID
			,PS_SRC_IP
			,PS_DST_IP
			,PS_SRC_IP_INT
			,PS_DST_IP_INT
			,PS_SRC_PORT
			,PS_DST_PORT
			,PS_TCP_FLAG
			,PS_TCP_FLAG_DEC
			,PS_ICS_HEADER1
			,PS_ICS_HEADER2
			,PS_ICS_HEADER3
			,PS_ICS_HEADER4
			,PS_ICS_HEADER5
			,PS_ICS_HEADER6
			,PS_ICS_HEADER7
			,PS_ICS_HEADER8
			,PS_ICS_HEADER9
			,PS_ICS_HEADER10
			,PS_ICS_HEADER11
			,PS_ICS_HEADER12
			,PS_ICS_HEADER13
			,PS_ICS_HEADER14
			,PS_WHITE_RULE
			,CASE WHEN (SELECT WL_ID CNT FROM nnet_cds2.nnc_wh_list_sig WHERE WL_LIST_SIG=PS_WHITE_RULE LIMIT 1) > 0 THEN 1 ELSE 0 END AS PS_WHITE_RESULT
			,(PS_BYTES / PS_PACKETS) AS PS_BYTES
			,PS_PACKETS
			,PS_REGDTTM
			,PS_FLOW_RESULT
			,PS_FLOW_VALUE
		FROM nnet_cds2.nnc_packet_stat_#{ps_table}
		WHERE PS_STRC_TIME <![CDATA[>=]]> #{ps_stime}
		AND PS_STRC_TIME <![CDATA[<=]]> #{ps_etime} 
		AND PS_WHITE_RULE = #{ps_white_rule}
		ORDER BY PS_STRC_TIME ASC
	</select>
	
	
	<select id="getWhiteRulePacketList" parameterType="map" resultType="NdrPs">
		SELECT PS_STRC_TIME
			,PS_WHITE_RULE
			,CASE WHEN (SELECT WL_ID CNT FROM nnet_cds2.nnc_wh_list_sig WHERE WL_LIST_SIG=PS_WHITE_RULE LIMIT 1) > 0 THEN 1 ELSE 0 END AS PS_WHITE_RESULT
			,PS_FLOW_RESULT
			,SUM(PS_BYTES) AS PS_BYTES
			,SUM(PS_PACKETS) AS PS_PACKETS
		FROM nnet_cds2.nnc_packet_stat_#{ps_table}
		WHERE PS_STRC_TIME <![CDATA[>=]]> #{ps_stime}
		AND PS_STRC_TIME <![CDATA[<=]]> #{ps_etime} 
		AND PS_WHITE_RULE = #{ps_white_rule}
		GROUP BY PS_STRC_TIME,PS_WHITE_RULE
		ORDER BY PS_STRC_TIME ASC
	</select>
	
	<!--   조건에 따른 ICS 패킷 목록    -->
	<select id="getPWRStr" parameterType="map" resultType="String">
		SELECT PS_WHITE_RULE FROM nnet_cds2.nnc_packet_stat_#{ps_table}
		WHERE PS_ID = #{ps_id}
	</select>
	
	<!-- 1분용약 패킷 정보 테이블 생성 -->
	<update id="createTblPacket" parameterType="map">
		CREATE TABLE IF NOT EXISTS nnet_cds2.nnc_packet_stat_#{table_name} (
			PS_ID BIGINT(20) NOT NULL AUTO_INCREMENT, 
			PS_NIC_ID VARCHAR(32) NULL DEFAULT '', 
			PS_STRC_TIME DATETIME NOT NULL, 
			PS_PAYLOAD_SIZE INT(11) NULL DEFAULT 0, 
			PS_TYPE VARCHAR(50) NULL DEFAULT '', 
			PS_PROTO_ID VARCHAR(32) NULL DEFAULT '', 
			PS_PROTO_SUB_TYPE VARCHAR(32) NULL DEFAULT '', 
			PS_PROTO_SUB_DEC VARCHAR(32) NULL DEFAULT '', 
			PS_PROTO_ICS INT(11) NULL DEFAULT 0, 
			PS_PROTO_ICS_TYPE INT(11) NULL DEFAULT 0, 
			PS_PROTO_ICS_CMD_TYPE INT(11) NULL DEFAULT 0,  
			PS_SRC_MAC VARCHAR(17) NULL DEFAULT '', 
			PS_SRC_MAC_VENDOR VARCHAR(128) NULL DEFAULT '',  
			PS_SRC_ICS_VENDOR INT(11) NULL DEFAULT 0,  
			PS_SRC_ICS_Layer INT(11) NULL DEFAULT 0, 
			PS_DST_MAC VARCHAR(17) NULL DEFAULT '', 
			PS_DST_MAC_VENDOR VARCHAR(128) NULL DEFAULT '',  
			PS_DST_ICS_VENDOR INT(11) NULL DEFAULT 0, 
			PS_DST_ICS_Layer INT(11) NULL DEFAULT 0, 
			PS_ETHER_TYPE VARCHAR(24) NULL DEFAULT '', 
			PS_ETHER_TYPE_DEC VARCHAR(128) NULL DEFAULT '', 
			PS_DSAP VARCHAR(50) NULL DEFAULT '', 
			PS_SSAP VARCHAR(50) NULL DEFAULT '', 
			PS_ORGANIZATION VARCHAR(50) NULL DEFAULT '', 
			PS_PID VARCHAR(50) NULL DEFAULT '', 
			PS_SRC_IP VARCHAR(15) NULL DEFAULT '', 
			PS_DST_IP VARCHAR(15) NULL DEFAULT '', 
			PS_SRC_IP_INT BIGINT(20) NULL DEFAULT 0, 
			PS_DST_IP_INT BIGINT(20) NULL DEFAULT 0, 
			PS_SRC_PORT INT(11) NULL DEFAULT 0, 
			PS_DST_PORT INT(11) NULL DEFAULT 0, 
			PS_TCP_FLAG VARCHAR(8) NULL DEFAULT '', 
			PS_TCP_FLAG_DEC VARCHAR(32) NULL DEFAULT '', 
			PS_ICS_HEADER1 VARCHAR(64) NULL DEFAULT '', 
			PS_ICS_HEADER2 VARCHAR(64) NULL DEFAULT '', 
			PS_ICS_HEADER3 VARCHAR(64) NULL DEFAULT '', 
			PS_ICS_HEADER4 VARCHAR(64) NULL DEFAULT '', 
			PS_ICS_HEADER5 VARCHAR(64) NULL DEFAULT '', 
			PS_ICS_HEADER6 VARCHAR(64) NULL DEFAULT '', 
			PS_ICS_HEADER7 VARCHAR(64) NULL DEFAULT '', 
			PS_ICS_HEADER8 VARCHAR(64) NULL DEFAULT '', 
			PS_ICS_HEADER9 VARCHAR(64) NULL DEFAULT '', 
			PS_ICS_HEADER10 VARCHAR(64) NULL DEFAULT '', 
			PS_ICS_HEADER11 VARCHAR(64) NULL DEFAULT '', 
			PS_ICS_HEADER12 VARCHAR(64) NULL DEFAULT '',
			PS_ICS_HEADER13 VARCHAR(64) NULL DEFAULT '', 
			PS_ICS_HEADER14 VARCHAR(64) NULL DEFAULT '', 
			PS_WHITE_RULE VARCHAR(260) NULL DEFAULT '', 
			PS_WHITE_RESULT INT(11) NULL DEFAULT 0, 
			PS_FLOW_RESULT INT(11) NULL DEFAULT 0, 
			PS_FLOW_VALUE INT(11) NULL DEFAULT 0, 
			PS_PACKETS BIGINT(20) NULL DEFAULT 0, 
			PS_BYTES BIGINT(20) NULL DEFAULT 0, 
			PS_REGDTTM DATETIME NULL DEFAULT now(), 
			PS_INOUT INT(11) NULL DEFAULT '0' COMMENT 'Outbound(0)/Inbound(1)   구분', 
			PS_DETECT INT(11) NULL DEFAULT '0' COMMENT '접근제어 허용(1)/차단(0)/악성코드 탐지(2)', 
			PS_DETECT_DESC TEXT NULL DEFAULT '' COMMENT '접근제어 탐지 내용', 
			PS_NGL_ID INT(11) NULL DEFAULT '0' COMMENT '그룹 ID', 
			PRIMARY KEY (PS_ID), 
			INDEX PS_STRC_TIME (PS_STRC_TIME), 
			INDEX PS_PROTO_SUB_DEC (PS_PROTO_SUB_DEC), 
			INDEX PS_SRC_IP (PS_SRC_IP), 
			INDEX PS_DST_IP (PS_DST_IP), 
			INDEX PS_WHITE_RULE (PS_WHITE_RULE), 
			INDEX PS_INOUT (PS_INOUT), 
			INDEX PS_NGL_ID (PS_NGL_ID)
		)COLLATE='utf8_general_ci' ENGINE=InnoDB;
	</update>
</mapper>